pipeline {
    agent {
        kubernetes {
            yaml """
            apiVersion: v1
            kind: Pod
            spec:
              containers:
              - name: ubuntu
                image: ubuntu:20.04
                command:
                - cat
                tty: true
                volumeMounts:
                - name: workspace-volume
                  mountPath: /home/jenkins/agent
              - name: docker
                image: docker:20.10.8
                command:
                - cat
                tty: true
                securityContext:
                  privileged: true
                volumeMounts:
                - name: docker-socket
                  mountPath: /var/run/docker.sock
              volumes:
              - name: workspace-volume
                emptyDir: {}
              - name: docker-socket
                hostPath:
                  path: /var/run/docker.sock
            """
        }
    }

    environment {
        DOCKERHUB_CREDENTIALS = 'dockerhub-credentials'
    }

    stages {
        stage('Prepare') {
            steps {
                container('ubuntu') {
                    script {
                        sh '''
                        apt-get update && apt-get install -y curl git
                        '''
                    }
                }
            }
        }

        stage('Push to DockerHub') {
            steps {
                container('docker') {
                    script {
                        withCredentials([usernamePassword(credentialsId: DOCKERHUB_CREDENTIALS, usernameVariable: 'DOCKER_HUB_USERNAME', passwordVariable: 'DOCKER_HUB_PASSWORD')]) {
                            sh """
                            echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USERNAME --password-stdin
                            """
                            
                            sh "pwd"
                            sh "ls"

                            def buildTag = "muhnishmalk/node-hello-world:\$BUILD_NUMBER"

                            sh "docker build -t ${buildTag} node-hello-world/"
                            sh "docker push ${buildTag}"

                            writeFile file: 'last_successful_build_tag.txt', text: buildTag
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            archiveArtifacts artifacts: 'last_successful_build_tag.txt', onlyIfSuccessful: true
        }

        always {
            cleanWs() 
        }
    }
}
