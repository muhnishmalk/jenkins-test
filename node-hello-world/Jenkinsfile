pipeline {
    agent {
        kubernetes {
            yaml """
            apiVersion: v1
            kind: Pod
            spec:
              containers:
              - name: ubuntu
                image: ubuntu:20.04
                command:
                - cat
                tty: true
                volumeMounts:
                - name: workspace-volume
                  mountPath: /home/jenkins/agent
              - name: docker
                image: docker:20.10.8
                command:
                - cat
                tty: true
                securityContext:
                  privileged: true  # Ensure the container has access to Docker socket
                volumeMounts:
                - name: docker-socket
                  mountPath: /var/run/docker.sock
              volumes:
              - name: workspace-volume
                emptyDir: {}
              - name: docker-socket
                hostPath:
                  path: /var/run/docker.sock
            """
        }
    }

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')  // Jenkins DockerHub credentials
    }

    stages {
        stage('Prepare') {
            steps {
                container('ubuntu') {
                    script {
                        sh '''
                        # Update the system and install any required packages
                        apt-get update && apt-get install -y curl git
                        '''
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                container('docker') {
                    script {
                        // Build Docker image using the Dockerfile in the repository
                        dockerImage = docker.build("muhnishmalk/node-hello-world")
                    }
                }
            }
        }

        stage('Push to DockerHub') {
            steps {
                container('docker') {
                    script {
                        docker.withRegistry('https://index.docker.io/v1/', 'DOCKERHUB_CREDENTIALS') {
                            dockerImage.push('latest')
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()  // Clean the workspace after the job completes
        }
    }
}
