pipeline {
    agent {
        kubernetes {
            yaml """
            apiVersion: v1
            kind: Pod
            spec:
                containers:
                - name: ubuntu
                  image: ubuntu:20.04
                  command:
                  - cat
                  tty: true
                  volumeMounts:
                  - name: workspace-volume
                    mountPath: /home/jenkins/agent
                - name: docker
                  image: docker:20.10.8
                  command:
                  - cat
                  tty: true
                  securityContext:
                      privileged: true
                  volumeMounts:
                  - name: docker-socket
                    mountPath: /var/run/docker.sock
                volumes:
                - name: workspace-volume
                  emptyDir: {}
                - name: docker-socket
                  hostPath:
                      path: /var/run/docker.sock
            """
        }
    }

    environment {
        DOCKERHUB_CREDENTIALS = 'dockerhub-credentials'
        ARGOCD_SERVER = 'http://192.168.49.2:31313'
        ARGOCD_CREDENTIALS = 'argocd-credentials'
        ARGOCD_APP_NAME = 'your-argocd-app-name'
        IMAGE_NAME = "muhnishmalk/node-hello-world"
        BUILD_TAG = "${IMAGE_NAME}:${BUILD_NUMBER}"
        PREVIOUS_IMAGE_TAG = "${IMAGE_NAME}:previous" // Tag used for rollback
    }

    stages {
        stage('Prepare') {
            steps {
                container('ubuntu') {
                    script {
                        sh '''
                        apt-get update && apt-get install -y curl git
                        '''
                    }
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                container('docker') {
                    script {
                        withCredentials([usernamePassword(credentialsId: DOCKERHUB_CREDENTIALS, usernameVariable: 'DOCKER_HUB_USERNAME', passwordVariable: 'DOCKER_HUB_PASSWORD')]) {
                            sh """
                            echo \$DOCKER_HUB_PASSWORD | docker login -u \$DOCKER_HUB_USERNAME --password-stdin
                            """

                            // Save the previous image before building the new one
                            sh "docker pull ${IMAGE_NAME}:latest || true" // Pull previous image, if available
                            sh "docker tag ${IMAGE_NAME}:latest ${PREVIOUS_IMAGE_TAG} || true" // Tag it for rollback

                            try {
                                // Build new image
                                sh "docker build -t ${BUILD_TAG} node-hello-world/"

                                // Push the new image
                                sh "docker push ${BUILD_TAG}"

                                // Tag the new image as latest
                                sh "docker tag ${BUILD_TAG} ${IMAGE_NAME}:latest"
                                sh "docker push ${IMAGE_NAME}:latest"

                                // Store the success build tag in an artifact file
                                sh "echo ${BUILD_TAG} > success_build_tag.txt"
                                archiveArtifacts artifacts: 'success_build_tag.txt'
                            } catch (Exception e) {
                                // Rollback in case of failure
                                echo "Build or push failed. Rolling back to previous image."

                                // Retrieve the last success build tag from the artifact
                                def lastSuccessBuildTag = sh(script: "cat success_build_tag.txt", returnStdout: true).trim()

                                // Tag the previous success image as latest
                                sh "docker tag ${lastSuccessBuildTag} ${IMAGE_NAME}:latest"
                                sh "docker push ${IMAGE_NAME}:latest"

                                // Fail the build after rollback
                                error("Build failed. Rolled back to previous image.")
                            }
                        }
                    }
                }
            }
        }

        stage('Sync with ArgoCD') {
            steps {
                withCredentials([usernamePassword(credentialsId: ARGOCD_CREDENTIALS, usernameVariable: 'ARGOCD_USERNAME', passwordVariable: 'ARGOCD_PASSWORD')]) {
                    script {
                        def syncUrl = "${env.ARGOCD_SERVER}/api/v1/applications/${env.ARGOCD_APP_NAME}/sync"
                        sh """
                        curl -X POST -u \$ARGOCD_USERNAME:\$ARGOCD_PASSWORD \
                             -H "Content-Type: application/json" \
                             -d '{"revision": "${BUILD_NUMBER}"}' \
                             ${syncUrl}
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Build and push successful, and ArgoCD sync triggered.'
        }

        failure {
            echo 'Build failed and rollback completed.'
        }

        always {
            deleteDir() // Clean up the workspace
        }
    }
}
