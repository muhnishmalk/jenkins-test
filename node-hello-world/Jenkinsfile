pipeline {
    agent {
        kubernetes {
            yaml """
            apiVersion: v1
            kind: Pod
            spec:
              containers:
              - name: ubuntu
                image: ubuntu:20.04
                command:
                - cat
                tty: true
                volumeMounts:
                - name: workspace-volume
                  mountPath: /home/jenkins/agent
              - name: docker
                image: docker:20.10.8
                command:
                - cat
                tty: true
                securityContext:
                  privileged: true  # Ensure the container has access to Docker socket
                volumeMounts:
                - name: docker-socket
                  mountPath: /var/run/docker.sock
              volumes:
              - name: workspace-volume
                emptyDir: {}
              - name: docker-socket
                hostPath:
                  path: /var/run/docker.sock
            """
        }
    }

    environment {
        DOCKERHUB_CREDENTIALS = 'dockerhub-credentials'  // Jenkins DockerHub credentials
    }

    stages {
        stage('Prepare') {
            steps {
                container('ubuntu') {
                    script {
                        sh '''
                        # Update the system and install any required packages
                        apt-get update && apt-get install -y curl git
                        '''
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                container('docker') {
                    script {
                        // Using the Dockerfile from the 'node-hello-world' directory
                        dockerImage = docker.build("muhnishmalk/node-hello-world", "-f node-hello-world/Dockerfile .")
                    }
                }
            }
        }

        stage('Push to DockerHub') {
            steps {
                container('docker') {
                    script {
                        // Using withCredentials to securely pass DockerHub credentials for login
                        withCredentials([usernamePassword(credentialsId: DOCKERHUB_CREDENTIALS, usernameVariable: 'DOCKER_HUB_USERNAME', passwordVariable: 'DOCKER_HUB_PASSWORD')]) {
                            // DockerHub login
                            sh "docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD"

                            // Build and tag the image with the build number
                            sh "docker build -t muhnishmalk/git:\$BUILD_NUMBER ."

                            // Push the image to DockerHub
                            sh "docker push muhnishmalk/git:\$BUILD_NUMBER"
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()  // Clean the workspace after the job completes
        }
    }
}
